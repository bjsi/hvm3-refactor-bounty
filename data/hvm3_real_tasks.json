{
    "make CTRs store only the CID in the Lab field, and move the arity to a global static object in C": {
        "task": "make CTRs store only the CID in the Lab field, and move the arity to a global static object in C",
        "related_symbols": [
            "Book",
            "Lab",
            "_CTR_",
            "parseCtr",
            "parseADTCtr",
            "termLab",
            "term_lab",
            "u12v2New",
            "u12v2_new",
            "u12v2Y",
            "u12v2_y",
            "u12v2_x"
        ]
    },
    "extend the size of the addr field on runtime nodes from 32 to 40 bits, and reduce the label field from 24 to 16 bits": {
        "task": "extend the size of the addr field on runtime nodes from 32 to 40 bits, and reduce the label field from 24 to 16 bits",
        "related_symbols": [
            "Lab",
            "Loc",
            "Term",
            "allocNode",
            "alloc_node",
            "compileFastAlloc",
            "reduceC",
            "reduce_dup_w32",
            "runtime_c",
            "termLab",
            "termNew",
            "term_lab",
            "u12v2_new",
            "u12v2_x",
            "u12v2_y",
            "u32",
            "u64"
        ]

    },
    "completely remove native numbers as a feature": {
        "task": "completely remove native numbers as a feature",
        "related_symbols": [
            "Core",
            "Oper",
            "_W32_",
            "primitives",
            "reduceAppW32",
            "reduceDupW32",
            "reduceMatW32",
            "reduceOpxW32",
            "reduceOpyW32",
            "reduce_app_w32",
            "reduce_dup_w32",
            "reduce_mat_w32",
            "reduce_opx_w32",
            "reduce_opy_w32",
            "u32",
            "u64"
        ]
    },
    "remove the list/string pretty printers": {
        "task": "remove the list/string pretty printers",
        "related_symbols": [
            "coreToString",
            "heapToString",
            "locToString",
            "pretty",
            "prettyLst",
            "prettyStr",
            "print_term_ln",
            "termToString",
            "print_term",
            "print_heap",
            "print_tag",
            "modeToString",
            "operToString",
            "labToString",
            "showCore"
        ]
    },
    "measure interactions by interaction type instead of just storing the total count. report results segmented by interaction type": {
        "task": "measure interactions by interaction type instead of just storing the total count. report results segmented by interaction type",
        "related_symbols": [
            "State",
            "TAG",
            "Tag",
            "getItr",
            "get_itr",
            "incItr",
            "inc_itr"
        ]
    },
    "implement a feature that prevents the user from creating two constructors with the same name. show a helpful error when that happens.": {
        "task": "implement a feature that prevents the user from creating two constructors with the same name. show a helpful error when that happens.",
        "related_symbols": [
            "Book",
            "ParserState",
            "_CTR_",
            "compile",
            "doParseBook",
            "parseADT",
            "parseADTCtr",
            "parseName",
            "parseName1",
            "showParseError"
        ]
    },
    "clean up every commented-out line of code (\"garbage collect\" the codebase)": {
        "task": "clean up every commented-out line of code (\"garbage collect\" the codebase)",
        "related_symbols": []
    },
    "add Tup and Get constructors. Tup behaves similarly to a superposition of label 0, and is represented as (a,b). Get behaves similarly to a duplication with label 0, and is represented as ! (a,b) = x": {
        "task": "add Tup and Get constructors. Tup behaves similarly to a superposition of label 0, and is represented as (a,b). Get behaves similarly to a duplication with label 0, and is represented as ! (a,b) = x",
        "related_symbols": [
            "Core",
            "collapseDupsAt",
            "collapseSups",
            "compileFull",
            "compileFast",
            "compileFastCore",
            "compileFullCore",
            "reduce"
        ]
    },
    "extend Lam and App nodes to also store a label, just like Sups and Dups. the App-Lam rule must be updated so that, when the labels are different, the nodes will commute instead of beta-reducing": {
        "task": "extend Lam and App nodes to also store a label, just like Sups and Dups. the App-Lam rule must be updated so that, when the labels are different, the nodes will commute instead of beta-reducing",
        "related_symbols": [
            "Book",
            "DUP_f",
            "SUP_f",
            "Lab",
            "_APP_",
            "_LAM_",
            "allocNode",
            "alloc_node",
            "liftDups",
            "reduceAppLam",
            "reduce_app_lam",
            "reduce_dup_lam",
            "termLab",
            "termNew",
            "term_lab",
            "term_new"
        ]
    },
    "replace the '\u03bbx body' syntax by '\\x body'": {
        "task": "replace the '\u03bbx body' syntax by '\\x body'",
        "related_symbols": [
            "Core",
            "_LAM_",
            "compileFastCore",
            "coreToString",
            "lexify",
            "parseCore",
            "parseName",
            "parseName1",
            "reduceAppLam",
            "reduce_app_lam"
        ]
    }
}