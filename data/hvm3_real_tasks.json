{
    "make CTRs store only the CID in the Lab field, and move the arity to a global static object in C": {
        "task": "make CTRs store only the CID in the Lab field, and move the arity to a global static object in C",
        "related_symbols": [
            "Book",
            "Lab",
            "_CTR_",
            "parseCtr",
            "parseADTCtr",
            "termLab",
            "term_lab",
            "u12v2New",
            "u12v2_new",
            "u12v2Y",
            "u12v2_y",
            "u12v2_x"
        ],
        "blocks_to_edit": [{"block_number": 21, "reasoning": "This block directly handles CTR terms and currently extracts both CID and arity from the Lab field. It needs to be modified to only extract the CID from Lab and retrieve the arity from the new global static object in C.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 22, "reasoning": "This block handles MAT terms and uses u12v2X to extract information from the Lab field. If the structure of the Lab field is changing for CTR terms, it might also affect how MAT terms are processed. This block may need to be reviewed and potentially modified.", "requires_direct_modification": false, "confidence": 0.7}, {"block_number": 87, "reasoning": "This block directly handles the compilation of CTR terms. It currently uses u12v2_new to pack both the CID and arity into the Lab field. We need to modify this to only include the CID in the Lab field and handle the arity separately.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 92, "reasoning": "This block deals with Ref terms and uses u12v2_new to pack two values into a single 64-bit value. While it's not directly related to CTRs, the pattern is similar and might need adjustment if the CTR representation changes affect how Ref terms are handled.", "requires_direct_modification": false, "confidence": 0.7}, {"block_number": 94, "reasoning": "This block contains the core logic for the fast compiler. While it doesn't directly handle CTRs, it might need adjustments to accommodate the new CTR representation, especially if it affects how terms are processed or reduced.", "requires_direct_modification": false, "confidence": 0.6}, {"block_number": 95, "reasoning": "Similar to block 94, this block is part of the fast compiler logic. It might need modifications if the changes to CTR representation affect how function arguments or body compilation works.", "requires_direct_modification": false, "confidence": 0.6}, {"block_number": 97, "reasoning": "This block handles numeric pattern matching, which is closely related to constructor pattern matching. While it doesn't directly use constructor IDs, it may need to be updated to maintain consistency with the new constructor representation.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 98, "reasoning": "This block directly handles constructor pattern matching using `u12v2_x(term_lab(valNam))`. It needs to be modified to use only the CID from the Lab field and retrieve the arity from the new global static object.", "requires_direct_modification": true, "confidence": 1.0}, {"block_number": 99, "reasoning": "This block also handles constructor pattern matching and uses `u12v2_x(term_lab(valNam))`. It needs to be updated to use the new CID-only Lab field and retrieve arity information from the global static object.", "requires_direct_modification": true, "confidence": 1.0}, {"block_number": 112, "reasoning": "This block deals with lambda abstractions, which may involve creating new terms. If the term creation process is affected by the changes to CTR representation, this block might need to be updated.", "requires_direct_modification": false, "confidence": 0.7}, {"block_number": 113, "reasoning": "This block handles function application and creates new terms. If the term creation process is affected by the changes to CTR representation, this block might need to be updated.", "requires_direct_modification": false, "confidence": 0.7}, {"block_number": 116, "reasoning": "This block directly handles the compilation of Ctr terms. It currently uses u12v2_new to pack both the cid and arity into the Lab field. We need to modify this to only store the cid in the Lab field and handle the arity separately.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 140, "reasoning": "This block directly handles the CTR case and currently extracts both CID and arity from the Lab field. It needs to be modified to only extract the CID from Lab and retrieve the arity from a new global static object.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 146, "reasoning": "This block deals with REF terms and uses u12v2X and u12v2Y to extract information from the Lab field. While it doesn't directly involve CTRs, the change in how Lab information is stored might affect how we extract and use this information for other term types as well. We might need to adjust how we handle Lab information here to be consistent with the new CTR representation.", "requires_direct_modification": true, "confidence": 0.8}, {"block_number": 158, "reasoning": "This block directly handles the creation of Ctr terms. It needs to be modified to store only the CID in the Ctr constructor, as the arity will now be stored separately in a global static object in C.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 188, "reasoning": "This block handles Ref terms, which use a similar packing mechanism with u12v2New. While not directly related to CTRs, it might need adjustment for consistency or if the global arity storage affects reference handling.", "requires_direct_modification": false, "confidence": 0.8}, {"block_number": 189, "reasoning": "This block directly creates and sets the CTR term, using u12v2New to pack both CID and arity. It needs to be modified to only store the CID in the Lab field.", "requires_direct_modification": true, "confidence": 1.0}, {"block_number": 190, "reasoning": "This block deals with Mat terms and uses u12v2New. While not directly related to CTRs, it might need adjustment if the change in CTR representation affects pattern matching.", "requires_direct_modification": false, "confidence": 0.7}, {"block_number": 205, "reasoning": "This block contains the cliRun function which handles the compilation process. It may need minor adjustments to accommodate the new constructor representation, particularly in how it processes the Book structure and compiles functions.", "requires_direct_modification": false, "confidence": 0.7}, {"block_number": 206, "reasoning": "The genMain function generates C code for the main function. It might need updates if the initialization or access of constructors changes due to the new representation.", "requires_direct_modification": false, "confidence": 0.6}, {"block_number": 209, "reasoning": "This block imports the HVML.Parse module, which likely contains the parsing logic for constructors. The parsing logic will need to be updated to store only the CID in the Lab field and handle the arity differently.", "requires_direct_modification": false, "confidence": 0.8}, {"block_number": 224, "reasoning": "This block calls the parseCtr function, which is likely to be affected by the change in how constructor information is stored. While the block itself doesn't need to be modified, it's closely related to the area of the code that will need changes.", "requires_direct_modification": false, "confidence": 0.7}, {"block_number": 231, "reasoning": "This block contains the `parseCtr` function, which is directly responsible for parsing and creating CTR terms. It needs to be modified to only store the CID in the Ctr, without including the arity information.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 237, "reasoning": "This block creates Ctr terms directly in the parseStr function. It needs to be updated to only use the CID in the Ctr constructor, without including arity information.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 238, "reasoning": "This block creates Ctr terms directly in the parseLst function. It needs to be updated to only use the CID in the Ctr constructor, without including arity information.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 242, "reasoning": "This block parses ADT definitions and stores constructor information. It currently creates mappings for both CID and arity. It needs to be modified to only store CID in the parsed data, as arity will be moved to a global static object in C.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 267, "reasoning": "This block directly handles the creation of Ctr (constructor) terms. It needs to be modified to store only the CID in the Lab field, without including the arity information.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 288, "reasoning": "This block contains logic for handling duplication of CTR terms. The way CTRs are processed here will need to be updated to reflect the new storage method where only the CID is stored in the Lab field.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 289, "reasoning": "Similar to block 288, this block also handles duplication of CTR terms and will need to be updated to work with the new CTR representation.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 290, "reasoning": "This block handles VAR terms and doesn't directly interact with CTR terms. It likely doesn't need modification for this task.", "requires_direct_modification": false, "confidence": 0.1}, {"block_number": 291, "reasoning": "This block handles REF terms and doesn't directly interact with CTR terms. It likely doesn't need modification for this task.", "requires_direct_modification": false, "confidence": 0.1}, {"block_number": 292, "reasoning": "This block is a catch-all for other term types and doesn't specifically handle CTR terms. It likely doesn't need modification for this task.", "requires_direct_modification": false, "confidence": 0.1}, {"block_number": 293, "reasoning": "This block defines a continuation function and doesn't directly interact with CTR terms. It likely doesn't need modification for this task.", "requires_direct_modification": false, "confidence": 0.1}, {"block_number": 300, "reasoning": "This block contains the `normalAtWith` function, which directly accesses the arity of CTR terms using `u12v2Y lab`. This needs to be modified to use the new global static object for arity lookup instead.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 305, "reasoning": "This block contains type definitions for Tag, Lab, and Term. While these definitions may not need to change, this block might need to be expanded to include the declaration of the new global static object for storing CTR arities.", "requires_direct_modification": true, "confidence": 0.7}, {"block_number": 322, "reasoning": "The term_new function is responsible for creating new terms, including CTRs. It currently encodes the lab (which includes both CID and arity for CTRs) into the term. This function will need to be modified to only encode the CID for CTR terms, and potentially interact with the new global static object for arity information.", "requires_direct_modification": true, "confidence": 0.7}, {"block_number": 331, "reasoning": "This function creates a u12v2 encoding, which is currently used for storing both CID and arity in the Lab field of CTRs. With the proposed change, this function may need to be modified or removed as it will no longer be used for CTRs.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 332, "reasoning": "This function extracts the lower 12 bits from a u12v2 encoding, which is likely used to get the CID. It may need to be modified or removed if the encoding scheme changes.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 333, "reasoning": "This function extracts the upper bits from a u12v2 encoding, which is likely used to get the arity. It may need to be modified or removed as arity will no longer be stored in the Lab field.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 360, "reasoning": "This block contains the `reduce_dup_ctr` function, which directly accesses the arity of a CTR term using `u12v2_y(ctr_lab)`. This needs to be modified to use the new global static object for arity lookup instead of extracting it from the Lab field.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 361, "reasoning": "This block deals with W32 terms and doesn't involve CTR terms or their arity. It likely doesn't need modification for this task.", "requires_direct_modification": false, "confidence": 0.1}, {"block_number": 362, "reasoning": "This block handles REF terms and doesn't directly involve CTR terms or their arity. It probably doesn't need modification for this task.", "requires_direct_modification": false, "confidence": 0.1}, {"block_number": 363, "reasoning": "This block deals with ERA terms and doesn't involve CTR terms or their arity. It likely doesn't need modification for this task.", "requires_direct_modification": false, "confidence": 0.1}, {"block_number": 364, "reasoning": "This block handles LAM terms and doesn't involve CTR terms or their arity. It probably doesn't need modification for this task.", "requires_direct_modification": false, "confidence": 0.1}, {"block_number": 365, "reasoning": "This block deals with SUP terms and doesn't directly involve CTR terms or their arity. It likely doesn't need modification for this task.", "requires_direct_modification": false, "confidence": 0.1}, {"block_number": 366, "reasoning": "This block directly uses the arity information stored in the CTR's Lab field (u12v2_y(ctr_lab)). We need to modify it to retrieve the arity from the new global static object instead.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 394, "reasoning": "This block contains a switch statement that handles different term types, including CTR. The CTR case might need to be updated to reflect the new representation where only the CID is stored in the Lab field. The function 'reduce_app_ctr' might need to be modified to use the new global static object for arity information instead of extracting it from the Lab field.", "requires_direct_modification": true, "confidence": 0.7}, {"block_number": 408, "reasoning": "This block directly handles CTR terms and extracts both CID and arity from the Lab field. It needs to be modified to only extract CID from Lab and get arity from a new global static object.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 438, "reasoning": "This block directly handles the string representation of Ctr (constructor) terms. It currently uses both the cid and fds (fields) in its representation. We need to modify this to only use the CID in the Lab field, as per the task requirements.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 460, "reasoning": "This block directly handles the creation of Ctr terms in the prettyRename function. It will need to be modified to reflect the new way of storing only the CID in the Lab field, without the arity information.", "requires_direct_modification": true, "confidence": 0.9}, {"block_number": 491, "reasoning": "This block contains foreign imports for C functions that interact with Terms and Labs. While we can't directly modify the C implementation here, we might need to update some of these imports or add new ones to support the new CTR representation and global arity storage.", "requires_direct_modification": true, "confidence": 0.7}]
    },
    "extend the size of the addr field on runtime nodes from 32 to 40 bits, and reduce the label field from 24 to 16 bits": {
        "task": "extend the size of the addr field on runtime nodes from 32 to 40 bits, and reduce the label field from 24 to 16 bits",
        "related_symbols": [
            "Lab",
            "Loc",
            "Term",
            "allocNode",
            "alloc_node",
            "compileFastAlloc",
            "reduceC",
            "reduce_dup_w32",
            "runtime_c",
            "termLab",
            "termNew",
            "term_lab",
            "u12v2_new",
            "u12v2_x",
            "u12v2_y",
            "u32",
            "u64"
        ],
        "blocks_to_edit": []
    },
    "completely remove native numbers as a feature": {
        "task": "completely remove native numbers as a feature",
        "related_symbols": [
            "Core",
            "Oper",
            "_W32_",
            "primitives",
            "reduceAppW32",
            "reduceDupW32",
            "reduceMatW32",
            "reduceOpxW32",
            "reduceOpyW32",
            "reduce_app_w32",
            "reduce_dup_w32",
            "reduce_mat_w32",
            "reduce_opx_w32",
            "reduce_opy_w32",
            "u32",
            "u64"
        ],
        "blocks_to_edit": []
    },
    "remove the list/string pretty printers": {
        "task": "remove the list/string pretty printers",
        "related_symbols": [
            "coreToString",
            "heapToString",
            "locToString",
            "pretty",
            "prettyLst",
            "prettyStr",
            "print_term_ln",
            "termToString",
            "print_term",
            "print_heap",
            "print_tag",
            "modeToString",
            "operToString",
            "labToString",
            "showCore"
        ],
        "blocks_to_edit": []
    },
    "measure interactions by interaction type instead of just storing the total count. report results segmented by interaction type": {
        "task": "measure interactions by interaction type instead of just storing the total count. report results segmented by interaction type",
        "related_symbols": [
            "State",
            "TAG",
            "Tag",
            "getItr",
            "get_itr",
            "incItr",
            "inc_itr"
        ],
        "blocks_to_edit": []
    },
    "implement a feature that prevents the user from creating two constructors with the same name. show a helpful error when that happens.": {
        "task": "implement a feature that prevents the user from creating two constructors with the same name. show a helpful error when that happens.",
        "related_symbols": [
            "Book",
            "ParserState",
            "_CTR_",
            "compile",
            "doParseBook",
            "parseADT",
            "parseADTCtr",
            "parseName",
            "parseName1",
            "showParseError"
        ],
        "blocks_to_edit": []
    },
    "clean up every commented-out line of code (\"garbage collect\" the codebase)": {
        "task": "clean up every commented-out line of code (\"garbage collect\" the codebase)",
        "related_symbols": [],
        "blocks_to_edit": []
    },
    "add Tup and Get constructors. Tup behaves similarly to a superposition of label 0, and is represented as (a,b). Get behaves similarly to a duplication with label 0, and is represented as ! (a,b) = x": {
        "task": "add Tup and Get constructors. Tup behaves similarly to a superposition of label 0, and is represented as (a,b). Get behaves similarly to a duplication with label 0, and is represented as ! (a,b) = x",
        "related_symbols": [
            "Core",
            "collapseDupsAt",
            "collapseSups",
            "compileFull",
            "compileFast",
            "compileFastCore",
            "compileFullCore",
            "reduce"
        ],
        "blocks_to_edit": []
    },
    "extend Lam and App nodes to also store a label, just like Sups and Dups. the App-Lam rule must be updated so that, when the labels are different, the nodes will commute instead of beta-reducing": {
        "task": "extend Lam and App nodes to also store a label, just like Sups and Dups. the App-Lam rule must be updated so that, when the labels are different, the nodes will commute instead of beta-reducing",
        "related_symbols": [
            "Book",
            "DUP_f",
            "SUP_f",
            "Lab",
            "_APP_",
            "_LAM_",
            "allocNode",
            "alloc_node",
            "liftDups",
            "reduceAppLam",
            "reduce_app_lam",
            "reduce_dup_lam",
            "termLab",
            "termNew",
            "term_lab",
            "term_new"
        ],
        "blocks_to_edit": []
    },
    "replace the '\u03bbx body' syntax by '\\x body'": {
        "task": "replace the '\u03bbx body' syntax by '\\x body'",
        "related_symbols": [
            "Core",
            "_LAM_",
            "compileFastCore",
            "coreToString",
            "lexify",
            "parseCore",
            "parseName",
            "parseName1",
            "reduceAppLam",
            "reduce_app_lam"
        ],
        "blocks_to_edit": []
    }
}