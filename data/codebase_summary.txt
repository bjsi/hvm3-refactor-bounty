Summary:
The HVM3 codebase is a highly parallel, functional runtime system designed to execute programs efficiently on massively parallel hardware. It is built around the Interaction Combinator model, which enables parallel evaluation of terms through a graph-based computational model. As a virtual machine, it provides a mechanism to compute with data. In traditional VMs, these are called instructions. In term rewriting systems, there are usually reductions. In HVM, the mechanism for computation is called interactions. The codebase is divided into two main parts: the Haskell frontend (`hvm.hs`) and the C backend (`hvm.c`). The Haskell code handles high-level operations like parsing, compilation, and term manipulation, while the C code provides low-level runtime support for memory management, term reduction, and parallel execution.

Glossary:
Node: A single element in the HVM net (e.g., APP, LAM, CON), connected via ports. The HVM runtime rewrites these interconnected nodes according to its interaction rules.
APP: an application (f x) connecting a function to an argument
LAM: a lambda λx (bod)
VAR: a lambda-bound variable x, pointing to some λx (bod)
OPX: a numeric operator
OPY: a numeric operator
CHR: a character literal
DUP: a duplicator that can replicate a term, allowing multiple references to the same structure in the net.
DP0: left-side variable of a duplication binding, referencing a in &{a b} = val
DP1: right-side variable of a duplication binding, referencing b in &{a b} = val
SUP: a superposition &{a b} - dual of DUP - two values used as one
ERA: an erasure * used for garbage collection
REF: a reference to another part of the net
CON: a constructor node carrying a “tag” that identifies which algebraic data constructor it represents
MAT: a matcher node, used for pattern matching in the HVM net